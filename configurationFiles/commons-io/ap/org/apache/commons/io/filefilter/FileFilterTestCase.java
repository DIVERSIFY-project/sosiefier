//package org.apache.commons.io.filefilter;
//
//import java.util.ArrayList;
//import java.util.Date;
//import java.io.File;
//import org.apache.commons.io.testtools.FileBasedTestCase;
//import java.io.FileFilter;
//import java.io.FilenameFilter;
//import java.util.HashSet;
//import org.apache.commons.io.IOCase;
//import java.util.List;
//import java.io.OutputStream;
//import java.util.Set;
//import org.junit.Test;
//
///** 
// * Used to test FileFilterUtils.
// */
//public class FileFilterTestCase extends FileBasedTestCase {
//    /** 
//     * The subversion directory name.
//     */
//static final String SVN_DIR_NAME = ".svn";
//
//    private static final boolean WINDOWS = (File.separatorChar) == '\\';
//
//    public FileFilterTestCase(String name) {
//        super(name);
//    }
//
//    @Override
//    public void setUp() {
//        FileBasedTestCase.getTestDirectory().mkdirs();
//    }
//
//    @Override
//    public void tearDown() throws Exception {
//        org.apache.commons.io.FileUtils.deleteDirectory(FileBasedTestCase.getTestDirectory());
//    }
//
//    public void assertFiltering(IOFileFilter filter, File file, boolean expected) throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1153,((((("Filter(File) " + (filter.getClass().getName())) + " not ") + expected) + " for ") + file));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1154,expected);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1156,filter,1155,filter.accept(file));
//        if ((file != null) && ((file.getParentFile()) != null)) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1157,((((("Filter(File, String) " + (filter.getClass().getName())) + " not ") + expected) + " for ") + file));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1158,expected);
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1160,filter,1159,filter.accept(file.getParentFile(), file.getName()));
//        } else if (file == null) {
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1161,(((("Filter(File, String) " + (filter.getClass().getName())) + " not ") + expected) + " for null"));
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1162,expected);
//            fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1164,filter,1163,filter.accept(file));
//        } 
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1166,filter,1165,filter.toString());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add867() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add867");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add868() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add868");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add869() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add869");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add870() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add870");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add871() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add871");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add872() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add872");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add873() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add873");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add874() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add874");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_add875() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_add875");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "foo" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2070() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2070");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "foo" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2071() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2071");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("foo");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2072() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2072");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("foo");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2073() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2073");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2074() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2074");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2075() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2075");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2076() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2076");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), false);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2077() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2077");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2078() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2078");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2079() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2079");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("foo"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2080() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2080");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2081() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2081");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("foo"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2082() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2082");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("foo"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2083() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2083");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2084() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2084");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2085() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2085");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2086() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2086");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), false);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2087() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2087");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("foo"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2088() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2088");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2089() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2089");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("foo");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2090() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2090");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2091() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2091");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2092() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2092");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("foo"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2093() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2093");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2094() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2094");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffix_literalMutation2095() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_literalMutation2095");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.tes"), true);
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "foo" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove704() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove704");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove705() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove705");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove706() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove706");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove707() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove707");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove708() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove708");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove709() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove709");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove710() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove710");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove711() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove711");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffix_remove712() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffix_remove712");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("fred.est"), true);
//        assertFiltering(filter, new File("fred.EST"), false);
//        assertFiltering(filter, new File("fred.exe"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("tes"), org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est"));
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File(".tes"), true);
//        assertFiltering(filter, new File("fred.test"), true);
//        filter = new SuffixFileFilter("est");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1240,filter,1239,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1241,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "ood" , "red" });
//        IOFileFilter listFilter = new SuffixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1242,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1244,listFilter,1243,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new SuffixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add876() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add876");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add877() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add877");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add878() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add878");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add879() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add879");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add880() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add880");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add881() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add881");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add882() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add882");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add883() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add883");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add884() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add884");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add885() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add885");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add886() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add886");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add887() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add887");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add888() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add888");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add889() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add889");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_add890() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_add890");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2099() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2099");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "foo" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2100() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2100");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "foo" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2101() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2101");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2102() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2102");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), false);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2103() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2103");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2104() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2104");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), false);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2105() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2105");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2106() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2106");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2107() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2107");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2108() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2108");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2109() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2109");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2110() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2110");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2111() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2111");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("foo" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2112() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2112");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2113() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2113");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2114() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2114");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("foo"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2115() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2115");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2116() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2116");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "foo" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2117() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2117");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "foo" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2118() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2118");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2119() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2119");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), false);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2120() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2120");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2121() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2121");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2122() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2122");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2123() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2123");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2124() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2124");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2125() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2125");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2126() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2126");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("foo"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2127() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2127");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), true);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2131() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2131");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2132() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2132");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2133() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2133");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2134() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2134");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("foo"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSuffixCaseInsensitive_literalMutation2135() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_literalMutation2135");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.tes"), true);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), false);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove713() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove713");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove714() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove714");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove715() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove715");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove716() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove716");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove717() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove717");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove718() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove718");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove719() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove719");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove720() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove720");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove721() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove721");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove722() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove722");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove723() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove723");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove724() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove724");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove725() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove725");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSuffixCaseInsensitive_remove726() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSuffixCaseInsensitive_remove726");
//        IOFileFilter filter = new SuffixFileFilter(new String[]{ "tes" , "est" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.est"), true);
//        assertFiltering(filter, new File("foo.EST"), true);
//        assertFiltering(filter, new File("foo.TES"), true);
//        assertFiltering(filter, new File("foo.exe"), false);
//        filter = new SuffixFileFilter("est" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        List<java.lang.String> suffixes = java.util.Arrays.asList(new String[]{ "tes" , "est" });
//        filter = new SuffixFileFilter(suffixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.tes"), true);
//        assertFiltering(filter, new File("bar.est"), true);
//        assertFiltering(filter, new File("bar.EST"), true);
//        assertFiltering(filter, new File("bar.TES"), true);
//        assertFiltering(filter, new File("bar.exe"), false);
//        try {
//            new SuffixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new SuffixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter("est", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("TEST"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_add626() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_add626");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_add627() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_add627");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_add628() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_add628");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_add629() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_add629");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_add630() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_add630");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_add631() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_add631");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1647() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1647");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1648() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1648");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1649() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1649");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1650() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1650");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1651() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1651");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1652() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1652");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1653() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1653");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1654() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1654");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1655() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1655");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1656() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1656");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), true);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1657() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1657");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("foo"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDirectory_literalMutation1658() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_literalMutation1658");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_remove474() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_remove474");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_remove475() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_remove475");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_remove476() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_remove476");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_remove477() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_remove477");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_remove478() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_remove478");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDirectory_remove479() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDirectory_remove479");
//        IOFileFilter filter = new DirectoryFileFilter();
//        assertFiltering(filter, new File("src/main/java/"), true);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1187,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1188,org.apache.commons.io.filefilter.DirectoryFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_add655() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_add655");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_add656() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_add656");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_add657() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_add657");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_add658() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_add658");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_add659() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_add659");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_add660() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_add660");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1692() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1692");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), true);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1693() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1693");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1694() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1694");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1695() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1695");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1696() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1696");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), false);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1697() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1697");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1698() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1698");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), true);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1699() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1699");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1700() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1700");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), true);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1701() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1701");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("foo"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFiles_literalMutation1702() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_literalMutation1702");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/"), false);
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_remove503() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_remove503");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_remove504() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_remove504");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_remove505() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_remove505");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_remove506() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_remove506");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_remove507() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_remove507");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFiles_remove508() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFiles_remove508");
//        IOFileFilter filter = FileFileFilter.FILE;
//        assertFiltering(filter, new File("src/java/"), false);
//        assertFiltering(filter, new File("pom.xml"), true);
//        assertFiltering(filter, new File("imaginary"), false);
//        assertFiltering(filter, new File("imaginary/"), false);
//        assertFiltering(filter, new File("LICENSE.txt"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add821() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add821");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add822() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add822");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add823() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add823");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add824() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add824");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add825() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add825");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add826() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add826");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add827() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add827");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add828() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add828");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add829() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add829");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add830() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add830");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_add831() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_add831");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1960() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1960");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "foo" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1961() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1961");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("foo");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1962() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1962");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("foo");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1963() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1963");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1964() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1964");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1965() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1965");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1966() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1966");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1967() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1967");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1968() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1968");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1969() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1969");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1970() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1970");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1971() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1971");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("foo"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1972() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1972");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1973() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1973");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("foo");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1974() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1974");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1975() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1975");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1976() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1976");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1977() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1977");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1978() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1978");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1979() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1979");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), true);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1980() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1980");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1981() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1981");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1982() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1982");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("foo");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1983() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1983");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1984() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1984");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1985() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1985");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("foo"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1986() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1986");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1987() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1987");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefix_literalMutation1988() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_literalMutation1988");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "foo" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove660() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove660");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove661() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove661");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove662() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove662");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove663() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove663");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove664() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove664");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove665() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove665");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove666() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove666");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove667() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove667");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove668() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove668");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove669() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove669");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefix_remove670() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefix_remove670");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" });
//        File testFile = new File("test");
//        File fredFile = new File("fred");
//        assertFiltering(filter, new File("FOO.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("food/"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar");
//        assertFiltering(filter, new File("barred\\"), true);
//        assertFiltering(filter, new File("test"), false);
//        assertFiltering(filter, new File("fo_o.test"), false);
//        assertFiltering(filter, new File("abar.exe"), false);
//        filter = new PrefixFileFilter("tes");
//        assertFiltering(filter, new File("test"), true);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1234,filter,1233,filter.accept(testFile.getParentFile(), testFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1235,!(filter.accept(fredFile.getParentFile(), fredFile.getName())));
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "fre" });
//        IOFileFilter listFilter = new PrefixFileFilter(prefixes);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1236,!(listFilter.accept(testFile.getParentFile(), testFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1238,listFilter,1237,listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
//        try {
//            new PrefixFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add832() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add832");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add833() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add833");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add834() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add834");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add835() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add835");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add836() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add836");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add837() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add837");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add838() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add838");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add839() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add839");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add840() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add840");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add841() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add841");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add842() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add842");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add843() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add843");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add844() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add844");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add845() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add845");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add846() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add846");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add847() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add847");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_add848() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_add848");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation1993() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation1993");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "foo" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation1994() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation1994");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation1995() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation1995");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation1996() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation1996");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation1997() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation1997");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation1998() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation1998");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation1999() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation1999");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), false);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2000() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2000");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("foo"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2001() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2001");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2002() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2002");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("foo" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2003() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2003");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2004() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2004");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2005() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2005");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2006() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2006");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), false);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2007() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2007");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2008() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2008");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), true);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2009() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2009");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("foo"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2010() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2010");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), false);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2011() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2011");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2012() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2012");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "foo" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2013() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2013");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2014() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2014");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2015() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2015");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2016() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2016");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2017() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2017");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2018() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2018");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), false);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2019() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2019");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("foo"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2020() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2020");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2024() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2024");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2025() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2025");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2026() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2026");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2027() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2027");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2028() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2028");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2029() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2029");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2030() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2030");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), true);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2031() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2031");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("foo"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testPrefixCaseInsensitive_literalMutation2032() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_literalMutation2032");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test1"), true);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove671() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove671");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove672() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove672");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove673() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove673");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove674() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove674");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove675() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove675");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove676() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove676");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove677() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove677");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove678() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove678");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove679() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove679");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove680() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove680");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove681() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove681");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove682() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove682");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove683() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove683");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove684() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove684");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove685() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove685");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testPrefixCaseInsensitive_remove686() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testPrefixCaseInsensitive_remove686");
//        IOFileFilter filter = new PrefixFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("bar.test1"), true);
//        assertFiltering(filter, new File("FOO.test1"), true);
//        assertFiltering(filter, new File("BAR.test1"), true);
//        filter = new PrefixFileFilter("bar" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        List<java.lang.String> prefixes = java.util.Arrays.asList(new String[]{ "foo" , "bar" });
//        filter = new PrefixFileFilter(prefixes , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test3"), true);
//        assertFiltering(filter, new File("bar.test3"), true);
//        assertFiltering(filter, new File("FOO.test3"), true);
//        assertFiltering(filter, new File("BAR.test3"), true);
//        try {
//            new PrefixFileFilter(((String)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((String[])(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new PrefixFileFilter(((List<java.lang.String>)(null)) , IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter("bar", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo.test2"), false);
//        assertFiltering(filter, new File("bar.test2"), true);
//        assertFiltering(filter, new File("FOO.test2"), false);
//        assertFiltering(filter, new File("BAR.test2"), true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(((String)(null)), IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add768() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add768");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add769() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add769");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add770() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add770");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add771() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add771");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add772() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add772");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add773() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add773");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add774() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add774");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add775() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add775");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add776() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add776");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add777() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add777");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add778() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add778");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add779() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add779");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add780() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add780");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add781() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add781");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add782() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add782");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add783() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add783");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add784() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add784");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add785() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add785");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add786() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add786");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add787() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add787");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add788() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add788");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add789() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add789");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add790() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add790");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add791() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add791");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add792() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add792");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add793() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add793");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add794() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add794");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add795() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add795");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add796() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add796");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add797() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add797");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add798() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add798");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add799() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add799");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add800() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add800");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_add801() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_add801");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1860() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1860");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "foo" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1861() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1861");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1862() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1862");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1863() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1863");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1864() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1864");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1865() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1865");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1866() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1866");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1867() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1867");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1868() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1868");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "foo" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1869() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1869");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1870() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1870");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1871() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1871");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1872() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1872");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1873() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1873");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1874() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1874");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1875() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1875");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1876() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1876");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1877() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1877");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1878() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1878");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "foo" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1879() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1879");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1880() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1880");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1881() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1881");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1882() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1882");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1883() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1883");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1884() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1884");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1885() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1885");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("foo"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1886() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1886");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1887() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1887");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1888() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1888");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "foo" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1889() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1889");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1890() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1890");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1891() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1891");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1892() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1892");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), false);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1893() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1893");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("foo"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1894() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1894");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("foo"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1895() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1895");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1896() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1896");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "foo" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1898() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1898");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1899() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1899");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1900() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1900");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1901() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1901");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1902() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1902");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1903() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1903");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1904() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1904");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("foo"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1905() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1905");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1906() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1906");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1907() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1907");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("foo");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1908() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1908");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1909() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1909");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1910() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1910");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1911() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1911");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1912() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1912");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1913() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1913");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), true);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1914() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1914");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1915() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1915");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1916() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1916");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1917() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1917");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1918() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1918");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1919() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1919");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1920() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1920");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1921() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1921");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1922() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1922");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1923() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1923");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("foo"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1924() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1924");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1925() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1925");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1926() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1926");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1927() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1927");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1928() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1928");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1929() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1929");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1930() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1930");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1931() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1931");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1932() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1932");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1933() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1933");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1934() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1934");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("foo"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilter_literalMutation1935() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_literalMutation1935");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove610() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove610");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove611() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove611");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove612() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove612");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove613() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove613");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove614() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove614");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove615() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove615");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove616() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove616");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove617() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove617");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove618() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove618");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove619() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove619");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove620() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove620");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove621() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove621");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove622() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove622");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove623() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove623");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove624() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove624");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove625() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove625");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove626() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove626");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove627() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove627");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove628() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove628");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove629() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove629");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove630() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove630");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove631() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove631");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove632() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove632");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove633() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove633");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove634() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove634");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove635() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove635");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove636() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove636");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove637() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove637");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove638() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove638");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove639() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove639");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove640() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove640");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove641() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove641");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove642() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove642");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilter_remove643() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilter_remove643");
//        IOFileFilter filter = new NameFileFilter(new String[]{ "foo" , "bar" });
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("BAR"), true);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), WINDOWS);
//        assertFiltering(filter, new File("BAR"), WINDOWS);
//        filter = new NameFileFilter(new String[]{ "foo" , "bar" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("BAR"), false);
//        ArrayList<java.lang.String> list = new ArrayList<java.lang.String>();
//        list.add("foo");
//        list.add("bar");
//        filter = new NameFileFilter(list);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("bar"), true);
//        assertFiltering(filter, new File("fred"), false);
//        filter = new NameFileFilter("foo");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), false);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo", IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("FOO"), true);
//        assertFiltering(filter, new File("barfoo"), false);
//        assertFiltering(filter, new File("foobar"), false);
//        assertFiltering(filter, new File("fred"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNameFilterNullArgument() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilterNullArgument");
//        String test = null;
//        try {
//            new NameFileFilter(test);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(test, IOCase.INSENSITIVE);
//            org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(test, IOCase.INSENSITIVE);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilterNullArrayArgument() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilterNullArrayArgument");
//        String[] test = null;
//        try {
//            new NameFileFilter(test);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNameFilterNullListArgument() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNameFilterNullListArgument");
//        List<java.lang.String> test = null;
//        try {
//            new NameFileFilter(test);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTrue_add891() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_add891");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTrue_add892() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_add892");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTrue_add893() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_add893");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTrue() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTrue_literalMutation2138() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_literalMutation2138");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTrue_literalMutation2139() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_literalMutation2139");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTrue_literalMutation2140() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_literalMutation2140");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testTrue_literalMutation2142() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_literalMutation2142");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo.test"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTrue_remove727() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_remove727");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTrue_remove728() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_remove728");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testTrue_remove729() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testTrue_remove729");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1245,org.apache.commons.io.filefilter.TrueFileFilter.TRUE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1246,org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFalse_add644() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_add644");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFalse_add645() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_add645");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFalse_add646() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_add646");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFalse() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFalse_literalMutation1673() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_literalMutation1673");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFalse_literalMutation1674() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_literalMutation1674");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFalse_literalMutation1675() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_literalMutation1675");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFalse_literalMutation1677() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_literalMutation1677");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFalse_remove492() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_remove492");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFalse_remove493() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_remove493");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFalse_remove494() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFalse_remove494");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter();
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1190,org.apache.commons.io.filefilter.FalseFileFilter.FALSE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1191,org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNot_add803() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_add803");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNot_add804() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_add804");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNot_add805() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_add805");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNot() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNot_literalMutation1940() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_literalMutation1940");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNot_literalMutation1941() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_literalMutation1941");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNot_literalMutation1942() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_literalMutation1942");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testNot_literalMutation1944() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_literalMutation1944");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo.test"), false);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, true);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNot_remove644() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_remove644");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNot_remove645() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_remove645");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNot_remove646() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNot_remove646");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter());
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, null, false);
//        try {
//            new NotFileFilter(null);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_add592() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_add592");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_add593() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_add593");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_add594() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_add594");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_add595() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_add595");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_add596() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_add596");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_add597() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_add597");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1576() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1576");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1577() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1577");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1578() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1578");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1579() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1579");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1580() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1580");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1581() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1581");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1582() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1582");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1583() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1583");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("foo"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1584() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1584");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1585() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1585");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("foo"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAnd_literalMutation1586() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_literalMutation1586");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , trueFilter), new File("foo.test"), true);
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_remove440() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_remove440");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_remove441() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_remove441");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_remove442() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_remove442");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_remove443() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_remove443");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_remove444() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_remove444");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAnd_remove445() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAnd_remove445");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(new AndFileFilter(trueFilter , falseFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , trueFilter), new File("foo.test"), false);
//        assertFiltering(new AndFileFilter(falseFilter , falseFilter), new File("foo.test"), false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        assertFiltering(new AndFileFilter(filters), new File("test"), false);
//        assertFiltering(new AndFileFilter(), new File("test"), false);
//        try {
//            new AndFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new AndFileFilter(null , falseFilter);
//        } catch (IllegalArgumentException ex) {
//        }
//        AndFileFilter f = new AndFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1168,f.getFileFilters(),1167,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1170,f,1169,f.toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add808() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add808");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add809() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add809");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add810() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add810");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add811() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add811");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add812() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add812");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add813() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add813");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add814() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add814");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add815() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add815");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add816() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add816");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add817() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add817");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add818() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add818");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add819() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add819");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_add820() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_add820");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr_literalMutation1949() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_literalMutation1949");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr_literalMutation1950() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_literalMutation1950");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr_literalMutation1951() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_literalMutation1951");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr_literalMutation1952() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_literalMutation1952");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr_literalMutation1953() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_literalMutation1953");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr_literalMutation1954() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_literalMutation1954");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr_literalMutation1955() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_literalMutation1955");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, true);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testOr_literalMutation1956() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_literalMutation1956");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove647() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove647");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove648() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove648");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove649() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove649");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove650() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove650");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove651() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove651");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove652() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove652");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove653() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove653");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove654() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove654");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove655() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove655");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove656() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove656");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove657() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove657");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove658() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove658");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        orFilter.removeFileFilter(trueFilter);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testOr_remove659() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testOr_remove659");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(new OrFileFilter(trueFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(trueFilter , falseFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , trueFilter), testFile, true);
//        assertFiltering(new OrFileFilter(falseFilter , falseFilter), testFile, false);
//        assertFiltering(new OrFileFilter(), testFile, false);
//        List<org.apache.commons.io.filefilter.IOFileFilter> filters = new ArrayList<org.apache.commons.io.filefilter.IOFileFilter>();
//        filters.add(trueFilter);
//        filters.add(falseFilter);
//        OrFileFilter orFilter = new OrFileFilter(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1226,orFilter,1225,orFilter.getFileFilters());
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1227,filters);
//        assertFiltering(orFilter, testFile, false);
//        orFilter.setFileFilters(filters);
//        assertFiltering(orFilter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1229,orFilter,1228,orFilter.accept(testFile.getParentFile(), testFile.getName()));
//        orFilter.removeFileFilter(trueFilter);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1230,!(orFilter.accept(testFile.getParentFile(), testFile.getName())));
//        try {
//            new OrFileFilter(falseFilter , null);
//        } catch (IllegalArgumentException ex) {
//        }
//        OrFileFilter f = new OrFileFilter(((List<org.apache.commons.io.filefilter.IOFileFilter>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1232,f.getFileFilters(),1231,f.getFileFilters().isEmpty());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_and_add647() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_add647");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_and_add648() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_add648");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_and_add649() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_add649");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_and_add650() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_add650");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_and() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_and_literalMutation1679() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_literalMutation1679");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_and_literalMutation1680() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_literalMutation1680");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_and_literalMutation1681() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_literalMutation1681");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_and_literalMutation1682() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_literalMutation1682");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_and_literalMutation1683() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_literalMutation1683");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_and_literalMutation1684() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_literalMutation1684");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_and_literalMutation1685() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_literalMutation1685");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_and_remove495() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_remove495");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_and_remove496() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_remove496");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_and_remove497() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_remove497");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_and_remove498() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_and_remove498");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_or_add651() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_add651");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_or_add652() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_add652");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_or_add653() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_add653");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_or_add654() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_add654");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_or() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_or_literalMutation1687() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_literalMutation1687");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_or_literalMutation1688() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_literalMutation1688");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_or_literalMutation1689() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_literalMutation1689");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testFileFilterUtils_or_literalMutation1690() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_literalMutation1690");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_or_remove499() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_remove499");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_or_remove500() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_remove500");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_or_remove501() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_remove501");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testFileFilterUtils_or_remove502() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFileFilterUtils_or_remove502");
//        IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
//        IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
//        File testFile = new File("foo.test");
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add613() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add613");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add614() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add614");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add615() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add615");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add616() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add616");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add617() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add617");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add618() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add618");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add619() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add619");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add620() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add620");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add621() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add621");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add622() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add622");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add623() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add623");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add624() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add624");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_add625() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_add625");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1607() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1607");
//        IOFileFilter filter = new WildcardFilter("foo");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1608() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1608");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "foo" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1609() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1609");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "foo" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1610() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1610");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "foo" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1611() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1611");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("foo");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1612() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1612");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("foo");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1613() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1613");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("foo");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1614() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1614");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("foo"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1615() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1615");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1616() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1616");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("foo");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1617() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1617");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1618() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1618");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1619() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1619");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1620() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1620");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), true);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1621() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1621");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("foo");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1622() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1622");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1623() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1623");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), false);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1624() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1624");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1625() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1625");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1626() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1626");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1627() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1627");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1628() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1628");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "foo" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1629() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1629");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "foo" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1630() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1630");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1631() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1631");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1632() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1632");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1633() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1633");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1634() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1634");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("foo"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1635() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1635");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), true);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1636() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1636");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("foo"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1637() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1637");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), false);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1638() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1638");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("foo"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1639() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1639");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), false);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1640() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1640");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("foo"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1641() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1641");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), false);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1642() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1642");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("foo"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    public void testDeprecatedWildcard_literalMutation1643() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_literalMutation1643");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        assertFiltering(filter, new File("log.txt"), true);
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove461() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove461");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove462() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove462");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove463() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove463");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove464() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove464");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove465() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove465");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove466() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove466");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove467() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove467");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove468() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove468");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove469() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove469");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove470() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove470");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove471() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove471");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove472() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove472");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @SuppressWarnings(value = "deprecation")
//    @Test(timeout = 1000)
//    public void testDeprecatedWildcard_remove473() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDeprecatedWildcard_remove473");
//        IOFileFilter filter = new WildcardFilter("*.txt");
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFilter(patternList);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        filter = new WildcardFilter("log?.txt");
//        assertFiltering(filter, new File("log1.txt"), true);
//        assertFiltering(filter, new File("log12.txt"), false);
//        filter = new WildcardFilter("open??.????04");
//        assertFiltering(filter, new File("openAB.102504"), true);
//        assertFiltering(filter, new File("openA.102504"), false);
//        assertFiltering(filter, new File("openXY.123103"), false);
//        filter = new WildcardFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1180,listFilter,1179,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1181,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1182,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1184,listFilter,1183,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1185,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1186,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add894() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add894");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add895() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add895");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add896() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add896");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add897() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add897");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add898() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add898");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add899() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add899");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add900() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add900");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add901() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add901");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add902() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add902");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add903() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add903");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add904() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add904");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add905() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add905");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add906() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add906");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add907() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add907");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add908() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add908");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add909() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add909");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add910() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add910");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add911() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add911");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add912() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add912");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add913() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add913");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add914() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add914");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add915() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add915");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add916() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add916");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add917() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add917");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_add918() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_add918");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard");
//        IOFileFilter filter = new WildcardFileFilter("foo");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2144() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2144");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2145() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2145");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), false);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2146() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2146");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2147() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2147");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2148() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2148");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("foo" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2149() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2149");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2150() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2150");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), false);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2151() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2151");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2152() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2152");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2153() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2153");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("foo" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2154() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2154");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2155() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2155");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2156() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2156");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("foo"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2157() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2157");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2158() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2158");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("foo" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2159() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2159");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2160() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2160");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2161() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2161");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("foo"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2162() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2162");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("foo" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2164() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2164");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2165() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2165");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2166() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2166");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2167() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2167");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2168() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2168");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "foo" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2169() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2169");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "foo" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2170() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2170");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2171() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2171");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), false);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2172() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2172");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2173() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2173");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2174() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2174");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2175() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2175");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2176() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2176");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "foo" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2177() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2177");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "foo" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2178() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2178");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2179() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2179");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2180() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2180");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("foo"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2181() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2181");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2182() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2182");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "foo" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2183() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2183");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "foo" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2184() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2184");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2185() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2185");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), false);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2186() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2186");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("foo"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2187() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2187");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2188() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2188");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "foo" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2189() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2189");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "foo" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2190() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2190");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2191() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2191");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2192() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2192");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("foo"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2193() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2193");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "foo" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2194() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2194");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "foo" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2196() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2196");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("foo"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2197() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2197");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), false);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2198() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2198");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("foo"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2199() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2199");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2200() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2200");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "foo" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2201() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2201");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "foo" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2202() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2202");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "foo" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2203() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2203");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("foo"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2204() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2204");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), false);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2205() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2205");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("foo"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2206() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2206");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), false);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2207() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2207");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("foo"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2208() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2208");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2209() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2209");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("foo"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2210() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2210");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2211() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2211");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("foo");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2212() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2212");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("foo");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testWildcard_literalMutation2213() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_literalMutation2213");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("foo");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove730() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove730");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove731() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove731");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove732() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove732");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove733() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove733");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove734() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove734");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove735() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove735");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove736() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove736");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove737() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove737");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove738() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove738");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove739() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove739");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove740() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove740");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove741() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove741");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove742() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove742");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove743() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove743");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove744() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove744");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove745() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove745");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove746() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove746");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove747() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove747");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove748() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove748");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove749() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove749");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove750() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove750");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove751() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove751");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove752() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove752");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove753() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove753");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testWildcard_remove754() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testWildcard_remove754");
//        IOFileFilter filter = new WildcardFileFilter("*.txt");
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter("*.txt" , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), true);
//        filter = new WildcardFileFilter("*.txt" , IOCase.SYSTEM);
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), WINDOWS);
//        filter = new WildcardFileFilter("*.txt" , ((IOCase)(null)));
//        assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.TXT"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" });
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.class"), true);
//        assertFiltering(filter, new File("Test.jsp"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.INSENSITIVE);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), true);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , IOCase.SYSTEM);
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
//        filter = new WildcardFileFilter(new String[]{ "*.java" , "*.class" } , ((IOCase)(null)));
//        assertFiltering(filter, new File("Test.java"), true);
//        assertFiltering(filter, new File("Test.JAVA"), false);
//        List<java.lang.String> patternList = java.util.Arrays.asList(new String[]{ "*.txt" , "*.xml" , "*.gif" });
//        IOFileFilter listFilter = new WildcardFileFilter(patternList);
//        assertFiltering(listFilter, new File("Test.txt"), true);
//        assertFiltering(listFilter, new File("Test.xml"), true);
//        assertFiltering(listFilter, new File("Test.gif"), true);
//        assertFiltering(listFilter, new File("Test.bmp"), false);
//        File txtFile = new File("test.txt");
//        File bmpFile = new File("test.bmp");
//        File dir = new File("src/java");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1248,listFilter,1247,listFilter.accept(txtFile));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1249,!(listFilter.accept(bmpFile)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1250,!(listFilter.accept(dir)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1252,listFilter,1251,listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1253,!(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName())));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1254,!(listFilter.accept(dir.getParentFile(), dir.getName())));
//        try {
//            new WildcardFileFilter(((String)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((String[])(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        try {
//            new WildcardFileFilter(((List<java.lang.String>)(null)));
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDelegateFileFilter_add611() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDelegateFileFilter_add611");
//        OrFileFilter orFilter = new OrFileFilter();
//        File testFile = new File("test.txt");
//        IOFileFilter filter = new DelegateFileFilter(((FileFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1172,filter,1171,filter.toString());
//        filter = new DelegateFileFilter(((FilenameFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1174,filter,1173,filter.toString());
//        try {
//            new DelegateFileFilter(((FileFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new DelegateFileFilter(((FilenameFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDelegateFileFilter_add612() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDelegateFileFilter_add612");
//        OrFileFilter orFilter = new OrFileFilter();
//        File testFile = new File("test.txt");
//        IOFileFilter filter = new DelegateFileFilter(((FileFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1172,filter,1171,filter.toString());
//        filter = new DelegateFileFilter(((FilenameFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1174,filter,1173,filter.toString());
//        try {
//            new DelegateFileFilter(((FileFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new DelegateFileFilter(((FilenameFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDelegateFileFilter() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDelegateFileFilter");
//        OrFileFilter orFilter = new OrFileFilter();
//        File testFile = new File("foo");
//        IOFileFilter filter = new DelegateFileFilter(((FileFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1172,filter,1171,filter.toString());
//        filter = new DelegateFileFilter(((FilenameFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1174,filter,1173,filter.toString());
//        try {
//            new DelegateFileFilter(((FileFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new DelegateFileFilter(((FilenameFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDelegateFileFilter_literalMutation1602() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDelegateFileFilter_literalMutation1602");
//        OrFileFilter orFilter = new OrFileFilter();
//        File testFile = new File("test.txt");
//        IOFileFilter filter = new DelegateFileFilter(((FileFilter)(orFilter)));
//        assertFiltering(filter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1172,filter,1171,filter.toString());
//        filter = new DelegateFileFilter(((FilenameFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1174,filter,1173,filter.toString());
//        try {
//            new DelegateFileFilter(((FileFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new DelegateFileFilter(((FilenameFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDelegateFileFilter_literalMutation1603() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDelegateFileFilter_literalMutation1603");
//        OrFileFilter orFilter = new OrFileFilter();
//        File testFile = new File("test.txt");
//        IOFileFilter filter = new DelegateFileFilter(((FileFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1172,filter,1171,filter.toString());
//        filter = new DelegateFileFilter(((FilenameFilter)(orFilter)));
//        assertFiltering(filter, testFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1174,filter,1173,filter.toString());
//        try {
//            new DelegateFileFilter(((FileFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new DelegateFileFilter(((FilenameFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDelegateFileFilter_remove459() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDelegateFileFilter_remove459");
//        OrFileFilter orFilter = new OrFileFilter();
//        File testFile = new File("test.txt");
//        IOFileFilter filter = new DelegateFileFilter(((FileFilter)(orFilter)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1172,filter,1171,filter.toString());
//        filter = new DelegateFileFilter(((FilenameFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1174,filter,1173,filter.toString());
//        try {
//            new DelegateFileFilter(((FileFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new DelegateFileFilter(((FilenameFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testDelegateFileFilter_remove460() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDelegateFileFilter_remove460");
//        OrFileFilter orFilter = new OrFileFilter();
//        File testFile = new File("test.txt");
//        IOFileFilter filter = new DelegateFileFilter(((FileFilter)(orFilter)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1172,filter,1171,filter.toString());
//        filter = new DelegateFileFilter(((FilenameFilter)(orFilter)));
//        assertFiltering(filter, testFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1174,filter,1173,filter.toString());
//        try {
//            new DelegateFileFilter(((FileFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new DelegateFileFilter(((FilenameFilter)(null)));
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add718() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add718");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add719() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add719");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add720() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add720");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add721() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add721");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add722() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add722");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add723() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add723");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add724() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add724");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add725() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add725");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add726() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add726");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add727() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add727");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add728() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add728");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add729() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add729");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_add730() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_add730");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1811() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1811");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1812() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1812");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1813() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1813");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1814() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1814");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1815() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1815");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, -1);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1816() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1816");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1817() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1817");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1818() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1818");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1819() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1819");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, -1);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1820() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1820");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1821() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1821");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1822() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1822");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1823() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1823");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 1);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1824() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1824");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeCVSAware_literalMutation1825() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_literalMutation1825");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove560() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove560");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove561() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove561");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove562() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove562");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove563() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove563");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove564() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove564");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove565() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove565");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove566() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove566");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove567() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove567");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove568() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove568");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove569() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove569");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove570() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove570");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove571() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove571");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeCVSAware_remove572() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeCVSAware_remove572");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "CVS");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add755() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add755");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add756() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add756");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add757() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add757");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add758() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add758");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add759() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add759");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add760() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add760");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add761() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add761");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add762() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add762");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add763() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add763");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add764() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add764");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add765() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add765");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add766() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add766");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_add767() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_add767");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1846() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1846");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1847() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1847");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1848() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1848");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1849() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1849");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, -1);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1850() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1850");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1851() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1851");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1852() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1852");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1853() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1853");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 1);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1854() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1854");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1855() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1855");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1856() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1856");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, -1);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1857() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1857");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeSVNAware_literalMutation1858() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_literalMutation1858");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove597() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove597");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove598() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove598");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove599() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove599");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove600() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove600");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove601() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove601");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove602() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove602");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove603() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove603");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove604() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove604");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove605() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove605");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove606() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove606");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove607() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove607");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter1, file, false);
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove608() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove608");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeSVNAware_remove609() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeSVNAware_remove609");
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(null);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("test-file1.txt"));
//        File file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        file.mkdirs();
//        assertFiltering(filter2, file, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(file);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file1.txt");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, true);
//        file = new File(FileBasedTestCase.getTestDirectory() , "test-file2.log");
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        file = new File(FileBasedTestCase.getTestDirectory() , SVN_DIR_NAME);
//        createFile(file, 0);
//        assertFiltering(filter1, file, true);
//        assertFiltering(filter2, file, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add569() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add569");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add570() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add570");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add571() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add571");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add572() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add572");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add573() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add573");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add574() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add574");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add575() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add575");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add576() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add576");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add577() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add577");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add578() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add578");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add579() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add579");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add580() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add580");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add581() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add581");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add582() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add582");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add583() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add583");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add584() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add584");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add585() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add585");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add586() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add586");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add587() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add587");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add588() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add588");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add589() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add589");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add590() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add590");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_add591() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_add591");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1544() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1544");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1545() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1545");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1546() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1546");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 1);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1547() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1547");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1001);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1548() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1548");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 1);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1549() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1549");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(999);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1550() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1550");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, -1);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1551() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1551");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1552() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1552");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1553() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1553");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1554() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1554");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1555() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1555");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1556() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1556");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1557() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1557");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1558() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1558");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, false);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1559() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1559");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1560() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1560");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, false);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1561() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1561");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, false);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1562() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1562");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1563() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1563");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, false);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1564() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1564");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, false);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1565() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1565");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1566() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1566");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1567() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1567");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1568() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1568");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1569() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1569");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1570() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1570");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1571() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1571");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1572() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1572");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, true);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1573() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1573");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, true);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testAgeFilter_literalMutation1574() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_literalMutation1574");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove419() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove419");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove420() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove420");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove421() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove421");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter1, oldFile, true);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove422() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove422");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove423() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove423");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove424() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove424");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove425() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove425");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove426() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove426");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove427() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove427");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove428() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove428");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove429() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove429");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove430() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove430");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove431() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove431");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove432() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove432");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove433() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove433");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove434() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove434");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove435() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove435");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove436() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove436");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove437() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove437");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove438() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove438");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testAgeFilter_remove439() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testAgeFilter_remove439");
//        File oldFile = new File(FileBasedTestCase.getTestDirectory() , "old.txt");
//        File reference = new File(FileBasedTestCase.getTestDirectory() , "reference.txt");
//        File newFile = new File(FileBasedTestCase.getTestDirectory() , "new.txt");
//        createFile(oldFile, 0);
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(reference, 0);
//        } while ((oldFile.lastModified()) == (reference.lastModified()) );
//        Date date = new Date();
//        long now = date.getTime();
//        do {
//            try {
//                java.lang.Thread.sleep(1000);
//            } catch (InterruptedException ie) {
//            }
//            createFile(newFile, 0);
//        } while ((reference.lastModified()) == (newFile.lastModified()) );
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(now, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, true);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(date, false);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, true);
//        IOFileFilter filter9 = org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(reference, false);
//        assertFiltering(filter2, oldFile, true);
//        assertFiltering(filter3, oldFile, false);
//        assertFiltering(filter4, oldFile, true);
//        assertFiltering(filter5, oldFile, true);
//        assertFiltering(filter6, oldFile, false);
//        assertFiltering(filter7, oldFile, true);
//        assertFiltering(filter8, oldFile, true);
//        assertFiltering(filter9, oldFile, false);
//        assertFiltering(filter1, newFile, false);
//        assertFiltering(filter2, newFile, false);
//        assertFiltering(filter3, newFile, true);
//        assertFiltering(filter4, newFile, false);
//        assertFiltering(filter5, newFile, false);
//        assertFiltering(filter6, newFile, true);
//        assertFiltering(filter7, newFile, false);
//        assertFiltering(filter8, newFile, false);
//        assertFiltering(filter9, newFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add849() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add849");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add850() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add850");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add851() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add851");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add852() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add852");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add853() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add853");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add854() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add854");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add855() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add855");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add856() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add856");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add857() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add857");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add858() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add858");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add859() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add859");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add860() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add860");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add861() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add861");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add862() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add862");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add863() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add863");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add864() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add864");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add865() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add865");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_add866() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_add866");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2035() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2035");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 31);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2036() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2036");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2037() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2037");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 127);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2038() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2038");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(63);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2039() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2039");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(63, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2040() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2040");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2041() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2041");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(63, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2042() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2042");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2043() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2043");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2044() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2044");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, true);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2045() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2045");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2046() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2046");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, false);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2047() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2047");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2048() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2048");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2049() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2049");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2050() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2050");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2051() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2051");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2052() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2052");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 128);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2053() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2053");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(34, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2054() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2054");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 129);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2055() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2055");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2056() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2056");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 128);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2057() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2057");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(129, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2058() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2058");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 127);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2059() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2059");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, true);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2060() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2060");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2061() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2061");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2062() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2062");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2063() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2063");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, true);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2064() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2064");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2065() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2065");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, false);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2066() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2066");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, false);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2067() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2067");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testSizeFilter_literalMutation2068() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_literalMutation2068");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(0);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove687() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove687");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove688() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove688");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter1, smallFile, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove689() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove689");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove690() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove690");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove691() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove691");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove692() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove692");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove693() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove693");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove694() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove694");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove695() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove695");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove696() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove696");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove697() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove697");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove698() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove698");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove699() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove699");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove700() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove700");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove701() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove701");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove702() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove702");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testSizeFilter_remove703() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testSizeFilter_remove703");
//        File smallFile = new File(FileBasedTestCase.getTestDirectory() , "small.txt");
//        createFile(smallFile, 32);
//        File largeFile = new File(FileBasedTestCase.getTestDirectory() , "large.txt");
//        createFile(largeFile, 128);
//        IOFileFilter filter1 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64);
//        IOFileFilter filter2 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, true);
//        IOFileFilter filter3 = org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(64, false);
//        assertFiltering(filter2, smallFile, false);
//        assertFiltering(filter3, smallFile, true);
//        assertFiltering(filter1, largeFile, true);
//        assertFiltering(filter2, largeFile, true);
//        assertFiltering(filter3, largeFile, false);
//        IOFileFilter filter4 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 127);
//        IOFileFilter filter5 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(32, 127);
//        IOFileFilter filter6 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(33, 128);
//        IOFileFilter filter7 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(31, 129);
//        IOFileFilter filter8 = org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(128, 128);
//        assertFiltering(filter4, smallFile, false);
//        assertFiltering(filter4, largeFile, false);
//        assertFiltering(filter5, smallFile, true);
//        assertFiltering(filter5, largeFile, false);
//        assertFiltering(filter6, smallFile, false);
//        assertFiltering(filter6, largeFile, true);
//        assertFiltering(filter7, smallFile, true);
//        assertFiltering(filter7, largeFile, true);
//        assertFiltering(filter8, largeFile, true);
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(-1);
//        } catch (IllegalArgumentException ex) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testHidden_add667() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_add667");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testHidden_add668() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_add668");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testHidden_add669() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_add669");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testHidden_add670() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_add670");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testHidden() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testHidden_literalMutation1733() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_literalMutation1733");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testHidden_remove509() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_remove509");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testHidden_remove510() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_remove510");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testHidden_remove511() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_remove511");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testHidden_remove512() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testHidden_remove512");
//        File hiddenDir = new File(SVN_DIR_NAME);
//        if (hiddenDir.exists()) {
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.HIDDEN, hiddenDir, hiddenDir.isHidden());
//            assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, hiddenDir, !(hiddenDir.isHidden()));
//        } 
//        assertFiltering(org.apache.commons.io.filefilter.HiddenFileFilter.VISIBLE, FileBasedTestCase.getTestDirectory(), true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_add598() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_add598");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_add599() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_add599");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_add600() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_add600");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_add601() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_add601");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_add602() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_add602");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_add603() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_add603");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanRead() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanRead_literalMutation1591() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_literalMutation1591");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 33);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanRead_literalMutation1592() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_literalMutation1592");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanRead_literalMutation1593() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_literalMutation1593");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanRead_literalMutation1594() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_literalMutation1594");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, false);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_remove446() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_remove446");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_remove447() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_remove447");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_remove448() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_remove448");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_remove449() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_remove449");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_remove450() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_remove450");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanRead_remove451() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanRead_remove451");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file1.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CAN_READ, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanReadFileFilter.READ_ONLY, readOnlyFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_add604() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_add604");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_add605() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_add605");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_add606() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_add606");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_add607() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_add607");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_add608() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_add608");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_add609() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_add609");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_add610() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_add610");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanWrite() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanWrite_literalMutation1596() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_literalMutation1596");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 31);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanWrite_literalMutation1597() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_literalMutation1597");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanWrite_literalMutation1598() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_literalMutation1598");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanWrite_literalMutation1599() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_literalMutation1599");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testCanWrite_literalMutation1600() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_literalMutation1600");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_remove452() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_remove452");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_remove453() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_remove453");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_remove454() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_remove454");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_remove455() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_remove455");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_remove456() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_remove456");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_remove457() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_remove457");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        readOnlyFile.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testCanWrite_remove458() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testCanWrite_remove458");
//        File readOnlyFile = new File(FileBasedTestCase.getTestDirectory() , "read-only-file2.txt");
//        createFile(readOnlyFile, 32);
//        readOnlyFile.setReadOnly();
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, FileBasedTestCase.getTestDirectory(), true);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, FileBasedTestCase.getTestDirectory(), false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add632() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add632");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add633() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add633");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add634() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add634");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add635() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add635");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add636() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add636");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add637() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add637");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add638() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add638");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add639() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add639");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add640() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add640");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add641() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add641");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add642() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add642");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_add643() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_add643");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1660() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1660");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1661() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1661");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1662() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1662");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "foo");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1663() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1663");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, -1);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1664() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1664");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1665() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1665");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1666() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1666");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1667() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1667");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1668() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1668");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "foo");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1669() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1669");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 33);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1670() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1670");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEmpty_literalMutation1671() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_literalMutation1671");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove480() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove480");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove481() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove481");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove482() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove482");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove483() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove483");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove484() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove484");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove485() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove485");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove486() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove486");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove487() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove487");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove488() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove488");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove489() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove489");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove490() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove490");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        org.apache.commons.io.FileUtils.forceDelete(emptyDir);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testEmpty_remove491() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEmpty_remove491");
//        File emptyDir = new File(FileBasedTestCase.getTestDirectory() , "empty-dir");
//        emptyDir.mkdirs();
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, false);
//        File emptyFile = new File(emptyDir , "empty-file.txt");
//        createFile(emptyFile, 0);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyFile, true);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, emptyDir, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, emptyDir, true);
//        File notEmptyFile = new File(emptyDir , "not-empty-file.txt");
//        createFile(notEmptyFile, 32);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.EMPTY, notEmptyFile, false);
//        assertFiltering(org.apache.commons.io.filefilter.EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add731() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add731");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add732() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add732");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add733() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add733");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add734() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add734");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add735() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add735");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add736() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add736");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add737() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add737");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add738() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add738");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add739() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add739");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add740() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add740");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add741() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add741");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_add742() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_add742");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly_literalMutation1827() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_literalMutation1827");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly_literalMutation1828() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_literalMutation1828");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly_literalMutation1829() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_literalMutation1829");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, true);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly_literalMutation1830() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_literalMutation1830");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly_literalMutation1831() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_literalMutation1831");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 31);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly_literalMutation1832() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_literalMutation1832");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 33);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly_literalMutation1833() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_literalMutation1833");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeDirectoryOnly_literalMutation1834() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_literalMutation1834");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove573() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove573");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove574() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove574");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove575() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove575");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove576() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove576");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove577() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove577");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove578() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove578");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove579() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove579");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove580() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove580");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove581() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove581");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove582() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove582");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove583() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove583");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeDirectoryOnly_remove584() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeDirectoryOnly_remove584");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1219,org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1221,null,1220,org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add743() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add743");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add744() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add744");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add745() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add745");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add746() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add746");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add747() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add747");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add748() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add748");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add749() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add749");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add750() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add750");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add751() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add751");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add752() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add752");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add753() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add753");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_add754() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_add754");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly_literalMutation1836() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_literalMutation1836");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly_literalMutation1837() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_literalMutation1837");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly_literalMutation1838() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_literalMutation1838");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, true);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly_literalMutation1839() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_literalMutation1839");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly_literalMutation1840() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_literalMutation1840");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 31);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly_literalMutation1841() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_literalMutation1841");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 31);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly_literalMutation1842() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_literalMutation1842");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMakeFileOnly_literalMutation1843() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_literalMutation1843");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove585() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove585");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove586() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove586");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove587() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove587");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove588() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove588");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove589() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove589");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove590() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove590");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove591() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove591");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove592() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove592");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove593() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove593");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove594() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove594");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileA.delete();
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove595() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove595");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMakeFileOnly_remove596() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMakeFileOnly_remove596");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1222,org.apache.commons.io.filefilter.FileFileFilter.FILE);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1224,null,1223,org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(null));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("B"));
//        File fileA = new File(FileBasedTestCase.getTestDirectory() , "A");
//        File fileB = new File(FileBasedTestCase.getTestDirectory() , "B");
//        fileA.mkdirs();
//        fileB.mkdirs();
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, false);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileA);
//        org.apache.commons.io.FileUtils.deleteDirectory(fileB);
//        createFile(fileA, 32);
//        createFile(fileB, 32);
//        assertFiltering(filter, fileA, false);
//        assertFiltering(filter, fileB, true);
//        fileB.delete();
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add671() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add671");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add672() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add672");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add673() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add673");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add674() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add674");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add675() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add675");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add676() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add676");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add677() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add677");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add678() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add678");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add679() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add679");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add680() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add680");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add681() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add681");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add682() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add682");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add683() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add683");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_add684() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_add684");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(201)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1735() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1735");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(253)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1736() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1736");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(185)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1737() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1737");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(189)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1738() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1738");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "foo" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1739() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1739");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "foo";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1740() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1740");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1741() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1741");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1742() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1742");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1743() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1743");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1744() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1744");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 33);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1745() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1745");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1746() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1746");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1747() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1747");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1748() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1748");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1749() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1749");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1750() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1750");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1751() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1751");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytes_literalMutation1752() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_literalMutation1752");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove513() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove513");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove514() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove514");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove515() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove515");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove516() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove516");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove517() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove517");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove518() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove518");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove519() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove519");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove520() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove520");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove521() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove521");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove522() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove522");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove523() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove523");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove524() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove524");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove525() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove525");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytes_remove526() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytes_remove526");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File emptyFile = new File(FileBasedTestCase.getTestDirectory() , "C.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.touch(emptyFile);
//        IOFileFilter filter = new MagicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(classFileMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, false);
//        assertFiltering(filter, emptyFile, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add685() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add685");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add686() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add686");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add687() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add687");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add688() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add688");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add689() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add689");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add690() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add690");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add691() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add691");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add692() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add692");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add693() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add693");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add694() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add694");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_add695() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_add695");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset");
//        byte[] tarMagicNumber = new byte[]{ 118 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1754() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1754");
//        byte[] tarMagicNumber = new byte[]{ 117 , 116 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1755() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1755");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 117 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1756() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1756");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 98 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1757() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1757");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 113 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1758() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1758");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 258;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1759() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1759");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1760() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1760");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1761() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1761");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1762() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1762");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (3 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1763() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1763");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, false);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1764() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1764");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1765() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1765");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1766() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1766");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1767() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1767");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterBytesOffset_literalMutation1768() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_literalMutation1768");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove527() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove527");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove528() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove528");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove529() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove529");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove530() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove530");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove531() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove531");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove532() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove532");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove533() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove533");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove534() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove534");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove535() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove535");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove536() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove536");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterBytesOffset_remove537() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterBytesOffset_remove537");
//        byte[] tarMagicNumber = new byte[]{ 117 , 115 , 116 , 97 , 114 };
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add696() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add696");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add697() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add697");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add698() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add698");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add699() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add699");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add700() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add700");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add701() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add701");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add702() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add702");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add703() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add703");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add704() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add704");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add705() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add705");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_add706() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_add706");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(203)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1770() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1770");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(253)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1771() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1771");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(187)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1772() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1772");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(191)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1773() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1773");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "foo" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1774() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1774");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "foo";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1775() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1775");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "foo";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1776() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1776");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1777() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1777");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1778() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1778");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1779() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1779");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 31);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1780() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1780");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, true);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1781() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1781");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1782() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1782");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, true);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1783() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1783");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1784() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1784");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterString_literalMutation1785() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_literalMutation1785");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove538() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove538");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove539() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove539");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove540() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove540");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove541() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove541");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove542() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove542");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove543() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove543");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove544() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove544");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove545() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove545");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove546() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove546");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove547() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove547");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterString_remove548() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterString_remove548");
//        byte[] classFileMagicNumber = new byte[]{ ((byte)(202)) , ((byte)(254)) , ((byte)(186)) , ((byte)(190)) };
//        String xmlFileContent = "<?xml version=\"1.0\" encoding=\"UTF-8\">\n" + "<element>text</element>";
//        String xmlMagicNumber = "<?xml version=\"1.0\"";
//        File classFileA = new File(FileBasedTestCase.getTestDirectory() , "A.class");
//        File xmlFileB = new File(FileBasedTestCase.getTestDirectory() , "B.xml");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream classFileAStream = org.apache.commons.io.FileUtils.openOutputStream(classFileA);
//        org.apache.commons.io.IOUtils.write(classFileMagicNumber, classFileAStream);
//        generateTestData(classFileAStream, 32);
//        classFileAStream.close();
//        org.apache.commons.io.FileUtils.write(xmlFileB, xmlFileContent);
//        IOFileFilter filter = new MagicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(xmlMagicNumber);
//        assertFiltering(filter, classFileA, false);
//        assertFiltering(filter, xmlFileB, true);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add707() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add707");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add708() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add708");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add709() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add709");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add710() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add710");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add711() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add711");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add712() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add712");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add713() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add713");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add714() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add714");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add715() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add715");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add716() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add716");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_add717() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_add717");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset");
//        String tarMagicNumber = "foo";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1787() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1787");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 258;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1788() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1788");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1789() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1789");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1790() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1790");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "foo");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1791() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1791");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (1 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1792() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1792");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1793() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1793");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1794() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1794");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1795() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1795");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, false);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1796() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1796");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterStringOffset_literalMutation1797() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_literalMutation1797");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, true);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove549() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove549");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove550() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove550");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove551() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove551");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove552() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove552");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove553() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove553");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove554() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove554");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove555() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove555");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove556() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove556");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove557() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove557");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove558() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove558");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testMagicNumberFileFilterStringOffset_remove559() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterStringOffset_remove559");
//        String tarMagicNumber = "ustar";
//        long tarMagicNumberOffset = 257;
//        File tarFileA = new File(FileBasedTestCase.getTestDirectory() , "A.tar");
//        File randomFileB = new File(FileBasedTestCase.getTestDirectory() , "B.txt");
//        File dir = new File(FileBasedTestCase.getTestDirectory() , "D");
//        dir.mkdirs();
//        OutputStream tarFileAStream = org.apache.commons.io.FileUtils.openOutputStream(tarFileA);
//        generateTestData(tarFileAStream, tarMagicNumberOffset);
//        org.apache.commons.io.IOUtils.write(tarMagicNumber, tarFileAStream);
//        tarFileAStream.close();
//        createFile(randomFileB, (2 * tarMagicNumberOffset));
//        IOFileFilter filter = new MagicNumberFileFilter(tarMagicNumber , tarMagicNumberOffset);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        filter = org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(tarMagicNumber, tarMagicNumberOffset);
//        assertFiltering(filter, tarFileA, true);
//        assertFiltering(filter, randomFileB, false);
//        assertFiltering(filter, dir, false);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("0" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 0 } , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation_literalMutation1800() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation_literalMutation1800");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("foo" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 0 } , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation_literalMutation1801() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation_literalMutation1801");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("0" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 0 } , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation_literalMutation1802() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation_literalMutation1802");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("0" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("foo" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 0 } , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation_literalMutation1803() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation_literalMutation1803");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("0" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 0 } , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation_literalMutation1805() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation_literalMutation1805");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("0" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 0 } , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation_literalMutation1806() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation_literalMutation1806");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("0" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 1 } , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation_literalMutation1807() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation_literalMutation1807");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("0" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 0 } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testMagicNumberFileFilterValidation_literalMutation1808() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testMagicNumberFileFilterValidation_literalMutation1808");
//        try {
//            new MagicNumberFileFilter(((String)(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("0" , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter("" , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(((byte[])(null)) , 0);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{ 0 } , -1);
//        } catch (IllegalArgumentException iae) {
//        }
//        try {
//            new MagicNumberFileFilter(new byte[]{  } , 1);
//        } catch (IllegalArgumentException iae) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterArray() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArray");
//        File fileA = newFile("foo");
//        File fileB = newFile("B");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1196,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1197,fileA);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1198,filtered[0]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterArray_literalMutation1704() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArray_literalMutation1704");
//        File fileA = newFile("A");
//        File fileB = newFile("foo");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1196,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1197,fileA);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1198,filtered[0]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterArray_literalMutation1705() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArray_literalMutation1705");
//        File fileA = newFile("A");
//        File fileB = newFile("B");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo");
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1196,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1197,fileA);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1198,filtered[0]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterArray_fromList() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArray_fromList");
//        File fileA = newFile("foo");
//        File fileB = newFile("B");
//        List<java.io.File> fileList = java.util.Arrays.asList(fileA, fileB);
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1193,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1194,fileA);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1195,filtered[0]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterArray_fromList_literalMutation1712() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArray_fromList_literalMutation1712");
//        File fileA = newFile("A");
//        File fileB = newFile("foo");
//        List<java.io.File> fileList = java.util.Arrays.asList(fileA, fileB);
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1193,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1194,fileA);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1195,filtered[0]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterArray_fromList_literalMutation1713() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArray_fromList_literalMutation1713");
//        File fileA = newFile("A");
//        File fileB = newFile("B");
//        List<java.io.File> fileList = java.util.Arrays.asList(fileA, fileB);
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo");
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1193,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1194,fileA);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1195,filtered[0]);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, File...)}
//     * that tests {@code null} parameters and {@code null} elements
//     * in the provided list.
//     */
//@Test(timeout = 1000)
//    public void testFilterArrayNullParameters_add661() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArrayNullParameters_add661");
//        File fileA = newFile("A");
//        File fileB = newFile("B");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(null, fileA, fileB);
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(null, fileA, fileB);
//        } catch (IllegalArgumentException iae) {
//        }
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileA, null);
//        } catch (IllegalArgumentException iae) {
//        }
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, ((File[])(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1192,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, File...)}
//     * that tests {@code null} parameters and {@code null} elements
//     * in the provided list.
//     */
//@Test(timeout = 1000)
//    public void testFilterArrayNullParameters_add662() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArrayNullParameters_add662");
//        File fileA = newFile("A");
//        File fileB = newFile("B");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(null, fileA, fileB);
//        } catch (IllegalArgumentException iae) {
//        }
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileA, null);
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileA, null);
//        } catch (IllegalArgumentException iae) {
//        }
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, ((File[])(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1192,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, File...)}
//     * that tests {@code null} parameters and {@code null} elements
//     * in the provided list.
//     */
//public void testFilterArrayNullParameters() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArrayNullParameters");
//        File fileA = newFile("foo");
//        File fileB = newFile("B");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(null, fileA, fileB);
//        } catch (IllegalArgumentException iae) {
//        }
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileA, null);
//        } catch (IllegalArgumentException iae) {
//        }
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, ((File[])(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1192,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filter(IOFileFilter, File...)}
//     * that tests {@code null} parameters and {@code null} elements
//     * in the provided list.
//     */
//public void testFilterArrayNullParameters_literalMutation1707() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterArrayNullParameters_literalMutation1707");
//        File fileA = newFile("A");
//        File fileB = newFile("foo");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(null, fileA, fileB);
//        } catch (IllegalArgumentException iae) {
//        }
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, fileA, null);
//        } catch (IllegalArgumentException iae) {
//        }
//        File[] filtered = org.apache.commons.io.filefilter.FileFilterUtils.filter(filter, ((File[])(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1192,filtered.length);
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterList(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterList() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterList");
//        File fileA = newFile("foo");
//        File fileB = newFile("B");
//        List<java.io.File> fileList = java.util.Arrays.asList(fileA, fileB);
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        List<java.io.File> filteredList = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1206,filteredList,1205,filteredList.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1208,filteredList,1207,filteredList.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterList(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterList_literalMutation1715() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterList_literalMutation1715");
//        File fileA = newFile("A");
//        File fileB = newFile("foo");
//        List<java.io.File> fileList = java.util.Arrays.asList(fileA, fileB);
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        List<java.io.File> filteredList = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1206,filteredList,1205,filteredList.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1208,filteredList,1207,filteredList.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterList(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterList_literalMutation1716() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterList_literalMutation1716");
//        File fileA = newFile("A");
//        File fileB = newFile("B");
//        List<java.io.File> fileList = java.util.Arrays.asList(fileA, fileB);
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo");
//        List<java.io.File> filteredList = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1206,filteredList,1205,filteredList.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1208,filteredList,1207,filteredList.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterList(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterList_fromArray() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterList_fromArray");
//        File fileA = newFile("foo");
//        File fileB = newFile("B");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        List<java.io.File> filteredList = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1202,filteredList,1201,filteredList.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1204,filteredList,1203,filteredList.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterList(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterList_fromArray_literalMutation1721() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterList_fromArray_literalMutation1721");
//        File fileA = newFile("A");
//        File fileB = newFile("foo");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        List<java.io.File> filteredList = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1202,filteredList,1201,filteredList.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1204,filteredList,1203,filteredList.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterList(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the list.
//     */
//public void testFilterList_fromArray_literalMutation1722() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterList_fromArray_literalMutation1722");
//        File fileA = newFile("A");
//        File fileB = newFile("B");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo");
//        List<java.io.File> filteredList = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1202,filteredList,1201,filteredList.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1204,filteredList,1203,filteredList.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterList(IOFileFilter, java.lang.Iterable)}
//     * that tests {@code null} parameters and {@code null} elements
//     * in the provided list.
//     */
//@Test(timeout = 1000)
//    public void testFilterListNullParameters() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterListNullParameters");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filterList(null, java.util.Collections.<File>emptyList());
//            org.apache.commons.io.filefilter.FileFilterUtils.filterList(null, java.util.Collections.<File>emptyList());
//        } catch (IllegalArgumentException iae) {
//        }
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, java.util.Arrays.<File>asList(((File)(null))));
//        } catch (IllegalArgumentException iae) {
//        }
//        List<java.io.File> filteredList = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, ((List<java.io.File>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1200,filteredList,1199,filteredList.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterList(IOFileFilter, java.lang.Iterable)}
//     * that tests {@code null} parameters and {@code null} elements
//     * in the provided list.
//     */
//@Test(timeout = 1000)
//    public void testFilterListNullParameters_add664() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterListNullParameters_add664");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filterList(null, java.util.Collections.<File>emptyList());
//        } catch (IllegalArgumentException iae) {
//        }
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, java.util.Arrays.<File>asList(((File)(null))));
//            org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, java.util.Arrays.<File>asList(((File)(null))));
//        } catch (IllegalArgumentException iae) {
//        }
//        List<java.io.File> filteredList = org.apache.commons.io.filefilter.FileFilterUtils.filterList(filter, ((List<java.io.File>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1200,filteredList,1199,filteredList.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterSet(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the set.
//     */
//public void testFilterSet() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterSet");
//        File fileA = newFile("foo");
//        File fileB = newFile("B");
//        Set<java.io.File> fileList = new HashSet<java.io.File>(java.util.Arrays.asList(fileA, fileB));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        Set<java.io.File> filteredSet = org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1216,filteredSet,1215,filteredSet.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1218,filteredSet,1217,filteredSet.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterSet(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the set.
//     */
//public void testFilterSet_literalMutation1724() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterSet_literalMutation1724");
//        File fileA = newFile("A");
//        File fileB = newFile("foo");
//        Set<java.io.File> fileList = new HashSet<java.io.File>(java.util.Arrays.asList(fileA, fileB));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        Set<java.io.File> filteredSet = org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1216,filteredSet,1215,filteredSet.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1218,filteredSet,1217,filteredSet.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterSet(IOFileFilter, java.lang.Iterable)}
//     * that tests that the method properly filters files from the set.
//     */
//public void testFilterSet_literalMutation1725() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterSet_literalMutation1725");
//        File fileA = newFile("A");
//        File fileB = newFile("B");
//        Set<java.io.File> fileList = new HashSet<java.io.File>(java.util.Arrays.asList(fileA, fileB));
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo");
//        Set<java.io.File> filteredSet = org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, fileList);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1216,filteredSet,1215,filteredSet.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1218,filteredSet,1217,filteredSet.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterSet(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the set.
//     */
//public void testFilterSet_fromArray() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterSet_fromArray");
//        File fileA = newFile("foo");
//        File fileB = newFile("B");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        Set<java.io.File> filteredSet = org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1212,filteredSet,1211,filteredSet.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1214,filteredSet,1213,filteredSet.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterSet(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the set.
//     */
//public void testFilterSet_fromArray_literalMutation1730() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterSet_fromArray_literalMutation1730");
//        File fileA = newFile("A");
//        File fileB = newFile("foo");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("A");
//        Set<java.io.File> filteredSet = org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1212,filteredSet,1211,filteredSet.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1214,filteredSet,1213,filteredSet.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterSet(IOFileFilter, File...)}
//     * that tests that the method properly filters files from the set.
//     */
//public void testFilterSet_fromArray_literalMutation1731() throws Exception {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterSet_fromArray_literalMutation1731");
//        File fileA = newFile("A");
//        File fileB = newFile("B");
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter("foo");
//        Set<java.io.File> filteredSet = org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, fileA, fileB);
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1212,filteredSet,1211,filteredSet.contains(fileA));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1214,filteredSet,1213,filteredSet.contains(fileB));
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterSet(IOFileFilter, java.lang.Iterable)}
//     * that tests {@code null} parameters and {@code null} elements
//     * in the provided set.
//     */
//@Test(timeout = 1000)
//    public void testFilterSetNullParameters() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterSetNullParameters");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filterSet(null, java.util.Collections.<File>emptySet());
//            org.apache.commons.io.filefilter.FileFilterUtils.filterSet(null, java.util.Collections.<File>emptySet());
//        } catch (IllegalArgumentException iae) {
//        }
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, new HashSet<java.io.File>(java.util.Arrays.<File>asList(((File)(null)))));
//        } catch (IllegalArgumentException iae) {
//        }
//        Set<java.io.File> filteredSet = org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, ((Set<java.io.File>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1210,filteredSet,1209,filteredSet.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    /** 
//     * Test method for {@link FileFilterUtils#filterSet(IOFileFilter, java.lang.Iterable)}
//     * that tests {@code null} parameters and {@code null} elements
//     * in the provided set.
//     */
//@Test(timeout = 1000)
//    public void testFilterSetNullParameters_add666() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testFilterSetNullParameters_add666");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filterSet(null, java.util.Collections.<File>emptySet());
//        } catch (IllegalArgumentException iae) {
//        }
//        IOFileFilter filter = org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter();
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, new HashSet<java.io.File>(java.util.Arrays.<File>asList(((File)(null)))));
//            org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, new HashSet<java.io.File>(java.util.Arrays.<File>asList(((File)(null)))));
//        } catch (IllegalArgumentException iae) {
//        }
//        Set<java.io.File> filteredSet = org.apache.commons.io.filefilter.FileFilterUtils.filterSet(filter, ((Set<java.io.File>)(null)));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1210,filteredSet,1209,filteredSet.size());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testEnsureTestCoverage() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testEnsureTestCoverage");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1189,new org.apache.commons.io.filefilter.FileFilterUtils());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNullFilters() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullFilters");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.toList(((IOFileFilter)(null)));
//            org.apache.commons.io.filefilter.FileFilterUtils.toList(((IOFileFilter)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.toList(new IOFileFilter[]{ null });
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    @Test(timeout = 1000)
//    public void testNullFilters_add807() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testNullFilters_add807");
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.toList(((IOFileFilter)(null)));
//        } catch (IllegalArgumentException expected) {
//        }
//        try {
//            org.apache.commons.io.filefilter.FileFilterUtils.toList(new IOFileFilter[]{ null });
//            org.apache.commons.io.filefilter.FileFilterUtils.toList(new IOFileFilter[]{ null });
//        } catch (IllegalArgumentException expected) {
//        }
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//
//    public void testDelegation() {
//        fr.inria.diversify.testamplification.logger.Logger.writeTestStart(Thread.currentThread(),this, "testDelegation");
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1176,null,1175,org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(((java.io.FileFilter)(org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE))));
//        fr.inria.diversify.testamplification.logger.Logger.logAssertArgument(Thread.currentThread(),1178,org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(((java.io.FilenameFilter)(org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE))),1177,org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(((java.io.FilenameFilter)(org.apache.commons.io.filefilter.FalseFileFilter.INSTANCE))).toString());
//        fr.inria.diversify.testamplification.logger.Logger.writeTestFinish(Thread.currentThread());
//    }
//}
//
