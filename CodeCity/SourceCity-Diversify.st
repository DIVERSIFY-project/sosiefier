Object subclass: #DiversifyPackage	instanceVariableNames: 'classes name'	classVariableNames: ''	poolDictionaries: ''	category: 'SourceCity-Diversify'!!DiversifyPackage methodsFor: 'initialize-release' stamp: 'Simon 12/4/2013 11:45'!initialize	classes := OrderedCollection new ! !!DiversifyPackage methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:46'!classes	^ classes! !!DiversifyPackage methodsFor: 'accessing' stamp: 'SimonAllier 12/19/2013 10:56'!maxTrial	^ (classes collect: [:cl | cl size]) max! !!DiversifyPackage methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:46'!name	^ name! !!DiversifyPackage methodsFor: 'accessing' stamp: 'Simon 12/4/2013 14:54'!name: aString	name := aString ! !!DiversifyPackage methodsFor: 'private' stamp: 'Simon 12/4/2013 13:21'!addClass: aDiversifyClass	classes add: aDiversifyClass ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DiversifyPackage class	instanceVariableNames: ''!!DiversifyPackage class methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 17:44'!buildWith: aCollection		| package |	package  := self new.	package name: aCollection first packageLocation. 		(aCollection groupedBy: [:each |		each classLocation]) 			keysAndValuesDo: [:key :value |				package addClass: (DiversifyClass new					className: key;					package: package;					trials: value)].	^ package	! !Object subclass: #DiversifyTrial	instanceVariableNames: 'packageLocation classLocation methodLocation type compile sosie classSize nbMethodInClass classReplaceOrAddLocalition system'	classVariableNames: ''	poolDictionaries: ''	category: 'SourceCity-Diversify'!!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!classLocation	^ classLocation! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!classLocation: anObject	classLocation := anObject! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 17:02'!classReplaceOrAddLocalition	^ classReplaceOrAddLocalition! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 17:02'!classReplaceOrAddLocalition: anObject	classReplaceOrAddLocalition := anObject! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 14:11'!classSize	^ classSize! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 14:11'!classSize: anObject	classSize := anObject! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!compile	^ compile! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!compile: anObject	compile := anObject! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!methodLocation	^ methodLocation! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!methodLocation: anObject	methodLocation := anObject! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 17:02'!nbMethodInClass	^ nbMethodInClass! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 17:02'!nbMethodInClass: anObject	nbMethodInClass := anObject! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 13:06'!packageLocation	^ packageLocation! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 13:06'!packageLocation: anObject	packageLocation := anObject! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!sosie	^ sosie! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!sosie: anObject	sosie := anObject! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 17:18'!system: aSystem	system := aSystem ! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!type	^ type! !!DiversifyTrial methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:45'!type: anObject	type := anObject! !!DiversifyTrial methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 17:37'!dependencies	^ system findDependencies: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DiversifyTrial class	instanceVariableNames: ''!!DiversifyTrial class methodsFor: 'as yet unclassified' stamp: 'SimonAllier 12/19/2013 10:35'!buildWith: aLine	| tmp |	tmp := (aLine subStrings: ';').		^ self new		type: (tmp at:1);		packageLocation: (tmp at:2);		classLocation: (tmp at:3);		classReplaceOrAddLocalition:  (tmp at:4);		methodLocation: (tmp at:5);
		classSize: (Integer readFrom: (tmp at:6));		nbMethodInClass: (Integer readFrom: (tmp at:7));		compile:  (Boolean readFrom:(tmp at:8));		sosie: (Boolean readFrom: (tmp at:9))! !!DiversifyTrial class methodsFor: 'as yet unclassified' stamp: 'SimonAllier 12/19/2013 10:40'!buildWith: aLine system: aSystem	| tmp |	tmp := (aLine subStrings: ';').		^ self new		system: aSystem; 		type: (tmp at:1);		packageLocation: (tmp at:2);		classLocation: (tmp at:3);		classReplaceOrAddLocalition:  (tmp at:4);		methodLocation: (tmp at:5);
		classSize: (Integer readFrom: (tmp at:6));		nbMethodInClass: (Integer readFrom: (tmp at:7));		compile: (Boolean readFrom: (tmp at:8));		sosie: (Boolean readFrom: (tmp at:9))! !Object subclass: #DiversifyClass	instanceVariableNames: 'className package trials'	classVariableNames: ''	poolDictionaries: ''	category: 'SourceCity-Diversify'!!DiversifyClass methodsFor: 'accessing' stamp: 'Simon 12/4/2013 17:43'!className 	^className! !!DiversifyClass methodsFor: 'accessing' stamp: 'Simon 12/4/2013 17:43'!className: anObject	className := anObject! !!DiversifyClass methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:47'!package	^ package! !!DiversifyClass methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:47'!package: anObject	package := anObject! !!DiversifyClass methodsFor: 'accessing' stamp: 'Simon 12/4/2013 13:12'!trials: anObject	trials := anObject! !!DiversifyClass methodsFor: 'as yet unclassified' stamp: 'Simon 12/5/2013 10:28'!dependencies	^ (trials gather: [:each |		each dependencies ]) asSet ! !!DiversifyClass methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 11:48'!initialize 	trial := OrderedCollection new.! !!DiversifyClass methodsFor: 'as yet unclassified' stamp: 'SimonAllier 12/19/2013 10:46'!nbCompile	^ (trials select: [:trial | trial compile]) size! !!DiversifyClass methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 14:28'!nbSosies	^( trials select: [:each | each sosie]) size! !!DiversifyClass methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 14:25'!nbTrials	^ trials size! !!DiversifyClass methodsFor: 'as yet unclassified' stamp: 'SimonAllier 12/19/2013 10:46'!perCompile	^ (trials size = 0) 		ifTrue: [1]		ifFalse: [(self nbCompile / trials size) asFloat + 0.001 ] ! !!DiversifyClass methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 17:54'!printString	^ className! !!DiversifyClass methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 14:21'!size	^ trials first classSize ! !AbstractSourceCityImporterStrategy subclass: #SourceCityImporterDiversifyStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SourceCity-Diversify'!!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 11:30'!buildingGap^ 5! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'SimonAllier 12/19/2013 10:48'!buildingNameGenerator 	^ [:anObject | anObject className, ', size: ',anObject size asString ,', sosie: ',anObject nbSosies asString, ', trial: ', anObject nbTrials asString, ', compile: ' , anObject nbCompile asString ]	"^ [:anObject | anObject className ]"! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 11:31'!buildingsSelector	^ [:anObject | anObject classes] ! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 15:25'!calculRatioColor: anObject	^ anObject nbSosies /anObject nbTrials! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 14:46'!cityWidth	^ [:aCity | ((aCity districts inject: 0 into: [:sum :aDistrict | sum + (aDistrict dimension x + (2 * self districtGap)) ]) /(1+ aCity districts size sqrt )   *2 asFloat roundedUp)]! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 18:00'!dependenciesSelector	^ [:anObject | anObject dependencies] ! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 15:58'!districtGap	^ 10! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 14:52'!districtNameGenerator	^ [:anObject | anObject name]! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 11:37'!districtWidth	^ [:aDistrict | ((aDistrict buildings inject: 0 into: [:max :aBuilding | max max: aBuilding dimension x]) + (2 * self buildingGap)) 		max: (((aDistrict buildings inject: 0 into: [:sum :aBuilding | sum + (aBuilding dimension x + (2 * self buildingGap)) ]) /(1+aDistrict buildings size sqrt))  asFloat roundedUp)]						! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 11:37'!districtsSelector 	^ [:anObject | anObject]! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 11:37'!normalizedBuildingDimension	^ [:anObject | Point3D x: (self normalizedXWidth value: anObject)		y: (self normalizedHeight value: anObject)		z: (self normalizedZWidth value: anObject) ]! !!SourceCityImporterDiversifyStrategy methodsFor: 'strategy' stamp: 'Simon 12/4/2013 15:23'!normalizedColor	|ratio|	^ [:anObject | ratio := self calculRatioColor: anObject. 		(ratio > 1) 			ifTrue: [self maxColor] 			ifFalse:[self calculMix: self lowColor at: (1-ratio) and: self maxColor at: (ratio)]].! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'Simon 12/4/2013 14:34'!calculMix: color1 at: color1Perc and: color2 at: color2Perc		^Color r: ((color1 red * color1Perc) + (color2 red * color2Perc))				g: ((color1 green * color1Perc) + (color2 green * color2Perc))				b: ((color1 blue * color1Perc) + (color2 blue * color2Perc))! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'SimonAllier 12/19/2013 11:03'!heightNormalizer	^ [:height |  4 *height sqrt ]! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'Simon 12/4/2013 15:28'!heightSelector	^ [:anObject | anObject nbTrials]! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'Simon 12/4/2013 15:27'!lowColor	^Color red! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'Simon 12/4/2013 15:51'!maxColor	^Color green! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'Simon 12/4/2013 15:54'!normalizedHeight	^ [:anObject |  (self heightNormalizer) value: (self heightSelector value: anObject)]! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'SimonAllier 12/19/2013 10:24'!normalizedXWidth"	^ [:anObject | 1 max: ((self widthNormalizer) value: (self widthSelector value: anObject)) ]"		^ [:anObject | (self xWidthNormalizer) value: (self xWidthSelector value: anObject) ]! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'SimonAllier 12/19/2013 10:25'!normalizedZWidth	^ [:anObject | (self zWidthNormalizer) value: (self zWidthSelector value: anObject) ]! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'SimonAllier 12/19/2013 11:06'!xWidthNormalizer	^ [:width | (width sqrt / DiversifySystem maxClassSize sqrt) * 25  ]! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'SimonAllier 12/19/2013 10:23'!xWidthSelector	^ [:anObject | anObject  size].! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'SimonAllier 12/19/2013 10:57'!zWidthNormalizer	^ [:width | width * 25]! !!SourceCityImporterDiversifyStrategy methodsFor: 'tools' stamp: 'SimonAllier 12/19/2013 10:23'!zWidthSelector	^ [:anObject | anObject  perCompile].! !Object subclass: #DiversifySystem	instanceVariableNames: 'packages trials'	classVariableNames: ''	poolDictionaries: ''	category: 'SourceCity-Diversify'!!DiversifySystem methodsFor: 'accessing' stamp: 'Simon 12/4/2013 11:39'!packages	^ packages! !!DiversifySystem methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 17:47'!findDependencies: aTrial	| className |		className := aTrial classReplaceOrAddLocalition.		^ packages gather: [:package |		(package classes select: [:cl | 		cl className = className ]) ] 	! !!DiversifySystem methodsFor: 'as yet unclassified' stamp: 'SimonAllier 12/19/2013 10:55'!initMaxValue		self class maxClassSize: (trials collect: [:trial | trial classSize]) max.	self class maxTrial: (packages collect: [:package | package maxTrial]) max.	! !!DiversifySystem methodsFor: 'as yet unclassified' stamp: 'SimonAllier 12/19/2013 10:51'!parseFile:fileName	| stream line |		trials := OrderedCollection new.	stream := fileName  asFileReference readStream.	"read header"	line := stream nextLine.	line := stream nextLine.	[line isNil not] whileTrue: [		trials add: (DiversifyTrial buildWith: line system: self).		line := stream nextLine].  		packages := (trials groupedBy: [:each |		each packageLocation]) values collect: [:each | DiversifyPackage buildWith: each].		self initMaxValue.! !!DiversifySystem methodsFor: 'as yet unclassified' stamp: 'SimonAllier 12/19/2013 10:54'!parseFile:fileName wihtFilter: aTypeFilter	| stream line |		trials := OrderedCollection new.	stream := fileName  asFileReference readStream.	"read header"	line := stream nextLine.	line := stream nextLine.	[line isNil not] whileTrue: [ | trial |		trial := DiversifyTrial buildWith: line system: self.		trial type = aTypeFilter ifTrue: [			trials add: trial].		line := stream nextLine]. 		packages := (trials groupedBy: [:each |		each packageLocation]) values collect: [:each | DiversifyPackage buildWith: each].		self initMaxValue.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DiversifySystem class	instanceVariableNames: 'maxClassSize maxTrial'!!DiversifySystem class methodsFor: 'as yet unclassified' stamp: 'Simon 12/4/2013 13:59'!import: afileName	^self new parseFile:afileName ! !!DiversifySystem class methodsFor: 'as yet unclassified' stamp: 'SimonAllier 12/19/2013 09:29'!import: afileName wihtFilter: aTypeFilter		^self new parseFile:afileName wihtFilter: aTypeFilter ! !!DiversifySystem class methodsFor: 'accessing' stamp: 'SimonAllier 12/19/2013 10:49'!maxClassSize	^ maxClassSize! !!DiversifySystem class methodsFor: 'accessing' stamp: 'SimonAllier 12/19/2013 10:49'!maxClassSize: anObject	maxClassSize := anObject! !!DiversifySystem class methodsFor: 'accessing' stamp: 'SimonAllier 12/19/2013 10:49'!maxTrial	^ maxTrial! !!DiversifySystem class methodsFor: 'accessing' stamp: 'SimonAllier 12/19/2013 10:49'!maxTrial: anObject	maxTrial := anObject! !